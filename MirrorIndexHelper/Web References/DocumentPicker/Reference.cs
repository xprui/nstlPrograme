//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace MirrorIndexHelper.DocumentPicker {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FullTextTransmiterSoap", Namespace="http://tempuri.org/")]
    public partial class FullTextTransmiter : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PickupFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FullTextTransmiter() {
            this.Url = global::MirrorIndexHelper.Properties.Settings.Default.MirrorIndexHelper_DocumentPicker_FullTextTransmiter;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PickupFileCompletedEventHandler PickupFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PickupFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PickUpResult PickupFile(string uniqueid) {
            object[] results = this.Invoke("PickupFile", new object[] {
                        uniqueid});
            return ((PickUpResult)(results[0]));
        }

        //public PickUpResult PickupFile(string uniqueid,bool b)//true 直接下载； false 返回流数据
        //{
        //    object[] results = this.Invoke("PickupFile", new object[] {
        //                uniqueid,b});
        //    return ((PickUpResult)(results[0]));
        //}


        /// <remarks/>
        public void PickupFileAsync(string uniqueid) {
            this.PickupFileAsync(uniqueid, null);
        }

        /// <remarks/>
        //public void PickupFileAsync(string uniqueid, object userState) {
        //    if ((this.PickupFileOperationCompleted == null)) {
        //        this.PickupFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPickupFileOperationCompleted);
        //    }
        //    this.InvokeAsync("PickupFile", new object[] {
        //                uniqueid,userState}, this.PickupFileOperationCompleted, userState);
        //}

        public void PickupFileAsync(string uniqueid, object userState)
        {
            if ((this.PickupFileOperationCompleted == null))
            {
                this.PickupFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPickupFileOperationCompleted);
            }
            this.InvokeAsync("PickupFile", new object[] {
                        uniqueid}, this.PickupFileOperationCompleted, userState);
        }


        private void OnPickupFileOperationCompleted(object arg) {
            if ((this.PickupFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PickupFileCompleted(this, new PickupFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1098.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class PickUpResult {
        
        private bool isFindedField;
        
        private bool needScanField;
        
        private string fileNameField;
        
        private byte[] contentField;
        
        private string fileMD5Field;
        
        /// <remarks/>
        public bool IsFinded {
            get {
                return this.isFindedField;
            }
            set {
                this.isFindedField = value;
            }
        }
        
        /// <remarks/>
        public bool NeedScan {
            get {
                return this.needScanField;
            }
            set {
                this.needScanField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        public string FileMD5 {
            get {
                return this.fileMD5Field;
            }
            set {
                this.fileMD5Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    public delegate void PickupFileCompletedEventHandler(object sender, PickupFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1098.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PickupFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PickupFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PickUpResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PickUpResult)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591